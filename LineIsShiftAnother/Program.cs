using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

//задача
//3.	*Для двух строк написать метод, определяющий, является ли одна строка перестановкой другой. Регистр можно не учитывать.
//а)  с использованием методов C#
//б) *разработав собственный алгоритм
//Например:
//badc являются перестановкой abcd
//автор Матюков Евгений

namespace LineIsShiftAnother
{
    class Program
    {
        static bool IsShiftA(string str1, string str2) //метод, определяющий, является ли одна строка перестановкой другой с использованием методов C#
        {
            //раскомментировать, если нужно без учета регистра
            //str1 = str1.ToLower();
            //str2 = str2.ToLower();

            char[] ch1 = str1.ToCharArray(); //преобразуем строку в массив символов
            char[] ch2 = str2.ToCharArray();
           
            Array.Sort(ch1); //отсортируем массив
            Array.Sort(ch2);

            str1 = new string(ch1); //преобразуем массив в строки
            str2 = new string(ch2);

            if (str1 == str2) return true; //если строки равны значит одна получена перестановкой другой

            return false;
        }

        //медленный алгоритм, жрущий много памяти
        static bool IsShiftB(string str1, string str2) //метод, определяющий, является ли одна строка перестановкой другой собственный алгоритм
        {
            //поскольку символ в юникоде занимает два байта, полный частотный массив двух строк займет 128к UInt16 слов

            UInt16[] ar1 = new UInt16[65535]; //частотный массив букв в строке 
            UInt16[] ar2 = new UInt16[65535];

            for (int n = 0; n < 65535; n++) //обнулим частотные массивы
            {
                ar1[n] = 0;
                ar2[n] = 0;
            }


            foreach (var ch in str1) //пройдемся по первой строке
                ar1[ch]++; //увеличим количество буквы ch в частотном массиве

            foreach (var ch in str2) //пройдемся по второй строке
                ar2[ch]++; //увеличим количество буквы ch в частотном массиве

            //если длина строки 1 + длина строки 2 < 65535, можно воспользоваться быстрым алгоритмом
            if (str1.Length + str2.Length < 65535)
            {
                foreach (var ch in str1) //пройдемся по первой строке
                    if (ar1[ch] != ar2[ch]) return false; //проверяем только те буквы, которые есть в строке1

                foreach (var ch in str2) //пройдемся по второй строке
                    if (ar1[ch] != ar2[ch]) return false; //проверяем только те буквы, которые есть в строке2

                return true;
            }

            //медленный алгоритм
            for (int n = 0; n < 65535; n++) //сравним частотные массивы двух строк
                if (ar1[n] != ar2[n]) return false; //если частотные массивы не совпадают, одна строка не является перестановкой другой

            return true;
        }

        //быстрый алгоритм, жрущий мало памяти
        static bool IsShiftC(string str1, string str2) //метод, определяющий, является ли одна строка перестановкой другой собственный алгоритм
        {
           //частотный массив займет количество_уникальных_букв_в_двух_строках * 3 UInt16 слов
            var chars = new List <UInt16>(); //создаём список букв, которые есть в двух строках
            var ar1 = new List<UInt16>(); //создаём частотный массив букв первой строки
            var ar2 = new List<UInt16>(); //создаём частотный массив букв второй строки

            foreach (var ch in str1) //пройдемся по первой строке
                if (!AddChar(chars, ar1, ch)) ar2.Add(0); ; //увеличим количество буквы ch в частотном массиве, если в первом частотном массиве новая буква, увеличим второй частотный массив 
            

            foreach (var ch in str2) //пройдемся по второй строке
                if (!AddChar(chars, ar2, ch)) return false; //увеличим количество буквы ch в частотном массиве, если такой буквы нет в первой строке, строка не является перестановкой первой
            

            for (int n = 0; n < chars.Count; n++)  //пройдемся по списку букв
                if (ar1[n] != ar2[n]) return false; //проверяем частотный массив
 
            return true;

        }

        static bool AddChar(List<UInt16> chars, List<UInt16> ar, char ch) //добавить символ в частотный массив, если добавляевтя новая буква, вернуть false
        {
            int n = -1, i;

            for (i = 0; i < chars.Count; i++) //поиск буквы ch в чаcтотном массиве
                if (chars[i] == ch) //буква ch найдена
                {
                    n = i;  //сохраняем в n указатель на букву ch
                    break;
                }

            if (n == -1)  //буква ch не найдена в частотном массиве
            {
                chars.Add(ch);  //добавить букву в конец списка
                ar.Add(1);      //эта буква употребляется один раз
                return false; //буква не найдена
            }

            ar[n]++; //увеличить букву в частотном массиве  
            return true; //буква найдена
        }

        static void Main(string[] args)
        {
            Console.WriteLine("Введите две строки чтобы узнать,\nявляется ли одна строка перестановкой другой или нажмите enter. ");

            string str1, str2; 
            
            str1 = Console.ReadLine();

            if (str1 == "")
            {
                str1 = "Привет, хабрахабр";
                str2 = "хабрахабр, Привет";

                Console.WriteLine(str1);
                Console.WriteLine(str2);
            }
            else str2 = Console.ReadLine();

            if (IsShiftA(str1, str2)) Console.WriteLine("\nфункция1: Одна строка является перестановкой другой");
            else Console.WriteLine("\nфункция1: Одна строка не является перестановкой другой");

            if (IsShiftB(str1, str2)) Console.WriteLine("\nфункция2: Одна строка является перестановкой другой");
            else Console.WriteLine("\nфункция2: Одна строка не является перестановкой другой");

            if (IsShiftC(str1, str2)) Console.WriteLine("\nфункция3: Одна строка является перестановкой другой");
            else Console.WriteLine("\nфункция3: Одна строка не является перестановкой другой");

            Console.ReadKey();
        }
    }
}
